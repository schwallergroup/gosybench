[bumpversion]
current_version = 0.0.1

[metadata]
name = gosybench
version = 0.0.1
description = Benchmark for evaluation of methods for extraction of synthetic routes from the literature.
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/schwallergroup/gosybench
download_url = https://github.com/schwallergroup/gosybench/releases
project_urls = 
	Bug Tracker = https://github.com/schwallergroup/gosybench/issues
	Source Code = https://github.com/schwallergroup/gosybench
author = Andres M Bran
author_email = andres.marulandabran@epfl.ch
maintainer = Andres M Bran
maintainer_email = andres.marulandabran@epfl.ch
license = MIT
license_files = 
	LICENSE
classifiers = 
	Development Status :: 1 - Planning
	Environment :: Console
	Intended Audience :: Developers
	License :: OSI Approved :: MIT License
	Operating System :: OS Independent
	Framework :: Pytest
	Framework :: tox
	Framework :: Sphinx
	Programming Language :: Python
	Programming Language :: Python :: 3.9
	Programming Language :: Python :: 3.10
	Programming Language :: Python :: 3 :: Only
keywords = 
	liac-repo
	llm
	organic-chemistry
	total-synthesis
	cookiecutter

[options]
packages = find:
package_dir = 
	= src
install_requires = 
	more_itertools
	tqdm
	click
	more_click
	networkx
	wandb
	tox
zip_safe = false
include_package_data = True
python_requires = >3.8

[options.packages.find]
where = src

[options.extras_require]
jasyntho = 
	scipy
	matplotlib
	dspy-ai
	py2opsin
	openai
	anthropic
	instructor==1.2.0
	colorama
	pandas
	python-dotenv
	PyMuPDF
	pdf2image
tests = 
	pytest
	coverage
docs = 
	sphinx==6.2.1
	sphinx-rtd-theme
	sphinx-click
	sphinx-autodoc-typehints
	sphinx_automodapi

[options.entry_points]
console_scripts = 
	gosybench = gosybench.cli:main
	jasyntho = jasyntho.cli:main [jasyntho]

[doc8]
max-line-length = 120

[coverage:run]
branch = True
source = gosybench
omit = 
	tests/*
	docs/*

[coverage:paths]
source = 
	src/gosybench
	.tox/*/lib/python*/site-packages/gosybench

[coverage:report]
show_missing = True
exclude_lines = 
	pragma: no cover
	raise NotImplementedError
	if __name__ == "__main__":
	if TYPE_CHECKING:
	def __str__
	def __repr__

[darglint]
docstring_style = sphinx
strictness = short
